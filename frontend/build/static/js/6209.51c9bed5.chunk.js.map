{"version":3,"file":"static/js/6209.51c9bed5.chunk.js","mappings":"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","sources":["webpack://frontend/./src/pages/Employer/CreatePost/Preassessment.module.css?faf3","pages/Employer/CreatePost/PreAssesment.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"pre_asssesment_container\":\"Preassessment_pre_asssesment_container__ToM5L\",\"rounds_heading\":\"Preassessment_rounds_heading__PWq8J\",\"question_container\":\"Preassessment_question_container__wXa1f\",\"question_number\":\"Preassessment_question_number__GL9DA\",\"question\":\"Preassessment_question__BErcX\",\"add_btn_container\":\"Preassessment_add_btn_container__zuu0v\",\"add_btn\":\"Preassessment_add_btn__NK-TZ\",\"aptitude_round_container\":\"Preassessment_aptitude_round_container__rmB59\",\"aptitude_heading_container\":\"Preassessment_aptitude_heading_container__vUfrx\",\"aptitude_round_flex_container\":\"Preassessment_aptitude_round_flex_container__WR7o2\",\"aptitude_round_question_option_heading\":\"Preassessment_aptitude_round_question_option_heading__isBT4\",\"aptitude_round_question_container_first_question\":\"Preassessment_aptitude_round_question_container_first_question__bP64D\",\"aptitude_round_question_container\":\"Preassessment_aptitude_round_question_container__ecWs4\",\"aptitude_round_question_number\":\"Preassessment_aptitude_round_question_number__v+s4R\",\"aptitude_round_question\":\"Preassessment_aptitude_round_question__-xv4q\",\"aptitude_round_option_container_first_option\":\"Preassessment_aptitude_round_option_container_first_option__EHZNa\",\"aptitude_round_option_container\":\"Preassessment_aptitude_round_option_container__36kBN\",\"aptitude_round_edit_del_btn_container\":\"Preassessment_aptitude_round_edit_del_btn_container__4zBIc\",\"aptitude_round_del_btn\":\"Preassessment_aptitude_round_del_btn__VWxUC\",\"form_action_btn_container\":\"Preassessment_form_action_btn_container__TxTwc\",\"cancel_btn\":\"Preassessment_cancel_btn__ofQRp\",\"submit_btn\":\"Preassessment_submit_btn__biusV\"};","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form, Modal } from \"react-bootstrap\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport PreAssesmentStyle from \"./Preassessment.module.css\";\r\n\r\nconst PreAssesment = () => {\r\n  const [mcqs, setMCQs] = useState(() => {\r\n    const savedMCQs = localStorage.getItem(\"mcqs\");\r\n    return savedMCQs ? JSON.parse(savedMCQs) : [];\r\n  });\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [newQuestion, setNewQuestion] = useState(\"\");\r\n  const [options, setOptions] = useState([\"\", \"\", \"\", \"\"]);\r\n  const [correctAnswers, setCorrectAnswers] = useState(\r\n    Array(mcqs.length).fill(null)\r\n  );\r\n  const [editingIndex, setEditingIndex] = useState(null);\r\n  const navigate = useNavigate();\r\n  const { state } = useLocation();\r\n\r\n  useEffect(() => {\r\n    // Save MCQs to local storage when component unmounts\r\n    return () => {\r\n      localStorage.setItem(\"mcqs\", JSON.stringify(mcqs));\r\n    };\r\n  }, [mcqs]);\r\n\r\n  const handleEdit = (index) => {\r\n    const mcqToEdit = mcqs[index];\r\n    setNewQuestion(mcqToEdit.question);\r\n    setOptions([...mcqToEdit.options]);\r\n    setEditingIndex(index);\r\n    setShowModal(true);\r\n    toast.success(\"Question updated successfully.\");\r\n  };\r\n\r\n  const handleAddMCQ = () => {\r\n    // Check if question and options are not empty\r\n    if (\r\n      newQuestion.trim() === \"\" ||\r\n      options.some((option) => option.trim() === \"\")\r\n    ) {\r\n      toast.error(\"Please fill out all fields\");\r\n      return;\r\n    }\r\n\r\n    // Check if at least one correct answer is selected\r\n    if (!correctAnswers.includes(true)) {\r\n      toast.error(\"Please select the correct answer for the question\");\r\n      return;\r\n    }\r\n\r\n    let updatedMCQs;\r\n    if (editingIndex !== null) {\r\n      updatedMCQs = [...mcqs];\r\n      updatedMCQs[editingIndex] = {\r\n        question: newQuestion,\r\n        options: [...options],\r\n        correctAnswer: options.findIndex(\r\n          (option, index) => correctAnswers[index]\r\n        ),\r\n      };\r\n    } else {\r\n      const correctIndex = options.findIndex(\r\n        (option, index) => correctAnswers[index]\r\n      );\r\n      const newMCQ = {\r\n        question: newQuestion,\r\n        options: [...options],\r\n        correctAnswer: correctIndex,\r\n      };\r\n      updatedMCQs = [...mcqs, newMCQ];\r\n      toast.success(\"Question added successfully.\");\r\n    }\r\n\r\n    setMCQs(updatedMCQs);\r\n    setShowModal(false);\r\n    setNewQuestion(\"\");\r\n    setOptions([\"\", \"\", \"\", \"\"]);\r\n    setCorrectAnswers(Array(updatedMCQs.length).fill(false)); // Reset correct answers\r\n  };\r\n\r\n  const handleDelete = (index) => {\r\n    const updatedMCQs = [...mcqs];\r\n    updatedMCQs.splice(index, 1);\r\n    setMCQs(updatedMCQs);\r\n    toast.success(\"Question deleted\");\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (mcqs.length !== 10) {\r\n      toast.error(\"Please provide exactly 10 questions\");\r\n    } else {\r\n      navigate(\"/create_post\", { state: { ...state, mcq: mcqs } });\r\n    }\r\n  };\r\n\r\n  const handleCancel = (e) => {\r\n    e.preventDefault();\r\n    setShowModal(false);\r\n    setNewQuestion(\"\");\r\n    setOptions([\"\", \"\", \"\", \"\"]);\r\n    setMCQs([]); // Clear MCQs\r\n    navigate(-1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={PreAssesmentStyle.aptitude_round_container}>\r\n        <div className={PreAssesmentStyle.rounds_heading}>MCQ Questions</div>\r\n\r\n        <div className={PreAssesmentStyle.aptitude_heading_container}>\r\n          <div\r\n            className={PreAssesmentStyle.aptitude_round_question_option_heading}\r\n          >\r\n            Question\r\n          </div>\r\n          <div\r\n            className={PreAssesmentStyle.aptitude_round_question_option_heading}\r\n          >\r\n            Option\r\n          </div>\r\n        </div>\r\n\r\n        <div>\r\n          {/* MCQ rendering */}\r\n          {mcqs.map((mcq, index) => (\r\n            <div key={index}>\r\n              <div className={PreAssesmentStyle.aptitude_round_flex_container}>\r\n                <div>\r\n                  <div\r\n                    className={\r\n                      PreAssesmentStyle.aptitude_round_question_container_first_question\r\n                    }\r\n                  >\r\n                    <div\r\n                      className={\r\n                        PreAssesmentStyle.aptitude_round_question_number\r\n                      }\r\n                    >\r\n                      Question no. {index + 1}\r\n                    </div>\r\n                    <div className={PreAssesmentStyle.aptitude_round_question}>\r\n                      {mcq.question}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <div\r\n                    className={\r\n                      PreAssesmentStyle.aptitude_round_option_container_first_option\r\n                    }\r\n                  >\r\n                    <ol type=\"A\">\r\n                      {mcq.options.map((option, idx) => (\r\n                        <li key={idx}>{option}</li>\r\n                      ))}\r\n                    </ol>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div\r\n                className={\r\n                  PreAssesmentStyle.aptitude_round_edit_del_btn_container\r\n                }\r\n              >\r\n                <Button variant=\"warning\" onClick={() => handleEdit(index)}>\r\n                  Edit\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  onClick={() => handleDelete(index)}\r\n                  className={PreAssesmentStyle.aptitude_round_del_btn}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n          {/* Add MCQ button */}\r\n          <div className={PreAssesmentStyle.add_btn_container}>\r\n            <Button\r\n              className={PreAssesmentStyle.add_btn}\r\n              onClick={() => setShowModal(true)}\r\n            >\r\n              ADD +\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* MCQ modal */}\r\n        <Modal show={showModal} onHide={() => setShowModal(false)}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Add MCQ</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <Form>\r\n              <Form.Group controlId=\"question\">\r\n                <Form.Label>Question</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Enter question\"\r\n                  value={newQuestion}\r\n                  onChange={(e) => setNewQuestion(e.target.value)}\r\n                />\r\n              </Form.Group>\r\n              {options.map((option, index) => (\r\n                <Form.Group\r\n                  controlId={`option${index}`}\r\n                  key={index}\r\n                  style={{ marginTop: \"10px\" }}\r\n                >\r\n                  <Form.Label>Option {index + 1}</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder={`Enter option ${index + 1}`}\r\n                    value={option}\r\n                    onChange={(e) => {\r\n                      const newOptions = [...options];\r\n                      newOptions[index] = e.target.value;\r\n                      setOptions(newOptions);\r\n                    }}\r\n                  />\r\n\r\n                  <Form.Check\r\n                    style={{ marginTop: \"5px\" }}\r\n                    type=\"radio\"\r\n                    id={`correct-answer-${index}`}\r\n                    label={`Correct Answer`}\r\n                    checked={correctAnswers[index]}\r\n                    onChange={() => {\r\n                      const newCorrectAnswers = Array(\r\n                        correctAnswers.length\r\n                      ).fill(false); // Reset all to false\r\n                      newCorrectAnswers[index] = true; // Set the current one to true\r\n                      setCorrectAnswers(newCorrectAnswers);\r\n                    }}\r\n                  />\r\n                </Form.Group>\r\n              ))}\r\n            </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleAddMCQ}>\r\n              Add\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n\r\n      <div className={PreAssesmentStyle.form_action_btn_container}>\r\n        <div className={PreAssesmentStyle.cancel_btn_container}>\r\n          <Button\r\n            className={PreAssesmentStyle.cancel_btn}\r\n            onClick={handleCancel}\r\n          >\r\n            CANCEL\r\n          </Button>\r\n        </div>\r\n        <div className={PreAssesmentStyle.submit_btn_container}>\r\n          <Button\r\n            className={PreAssesmentStyle.submit_btn}\r\n            onClick={handleSubmit}\r\n          >\r\n            SUBMIT\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PreAssesment;\r\n","function _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.indexOf(n) >= 0) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nexport { _objectWithoutPropertiesLoose as default };"],"names":["PreAssesment","mcqs","setMCQs","useState","savedMCQs","localStorage","getItem","JSON","parse","showModal","setShowModal","newQuestion","setNewQuestion","options","setOptions","correctAnswers","setCorrectAnswers","Array","length","fill","editingIndex","setEditingIndex","navigate","useNavigate","state","useLocation","useEffect","setItem","stringify","_jsxs","_Fragment","children","className","PreAssesmentStyle","aptitude_round_container","_jsx","rounds_heading","aptitude_heading_container","aptitude_round_question_option_heading","map","mcq","index","aptitude_round_flex_container","aptitude_round_question_container_first_question","aptitude_round_question_number","aptitude_round_question","question","aptitude_round_option_container_first_option","type","option","idx","aptitude_round_edit_del_btn_container","Button","variant","onClick","mcqToEdit","toast","success","handleEdit","updatedMCQs","splice","handleDelete","aptitude_round_del_btn","add_btn_container","add_btn","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","placeholder","value","onChange","e","target","concat","style","marginTop","newOptions","Check","id","label","checked","newCorrectAnswers","Footer","handleAddMCQ","trim","some","error","includes","correctAnswer","findIndex","correctIndex","newMCQ","form_action_btn_container","cancel_btn_container","cancel_btn","preventDefault","submit_btn_container","submit_btn","_objectWithoutPropertiesLoose","r","t","n","hasOwnProperty","call","indexOf"],"sourceRoot":""}