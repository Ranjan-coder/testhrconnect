{"version":3,"file":"static/js/9600.a721d7af.chunk.js","mappings":"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","sources":["pages/Auth/Password/Hr/ResetPassword/HrResetPassword.js","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroupText.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { Link, useParams, useNavigate } from \"react-router-dom\";\r\nimport logo from \"../../../../../Assets/logo.png\";\r\nimport \"./HrResetPassword.css\";\r\nimport toast from 'react-hot-toast';\r\nimport axios from \"axios\";\r\n\r\nconst baseUrl = process.env.REACT_APP_BACKEND_BASE_URL;\r\n\r\nfunction HrResetPassword() {\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const nav = useNavigate();\r\n  const { password } = formData;\r\n  const { token } = useParams();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsSubmitting(true);\r\n    try {\r\n      const response = await axios.post(\r\n        `${baseUrl}/hr/reset-password/${token}`,\r\n        {\r\n          password,\r\n        }\r\n      );\r\n\r\n      if (response.status === 200) {\r\n        // Inform the user about the password change\r\n        toast.success(\"Your password has been changed successfully!\");\r\n\r\n        // Redirect after a short delay\r\n        setTimeout(() => {\r\n          // console.log(\"Redirecting to login page...\");\r\n          nav(\"/login\");\r\n        }, 1500);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error resetting password:\", error);\r\n      toast.error(\"Failed to reset password. Please try again later.\");\r\n    }finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const toggleShowPassword = () => {\r\n    setFormData({ ...formData, showPassword: !formData.showPassword });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"forgot-password-container\">\r\n        <div className=\"form-wrapper\">\r\n          <div className=\"logo-container\">\r\n            <img src={logo} alt=\"network-error\" className=\"logo\" />\r\n          </div>\r\n          <h2>Reset Password</h2>\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group className=\"mb-3\" controlId=\"formPassword\">\r\n              <Form.Label>Password</Form.Label>\r\n              <InputGroup>\r\n                <Form.Control\r\n                  type={formData.showPassword ? \"text\" : \"password\"}\r\n                  value={formData.password}\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={handleChange}\r\n                  required\r\n                  className=\"forgot_pass_input\"\r\n                />\r\n                <Button variant=\"light\" onClick={toggleShowPassword}>\r\n                  {formData.showPassword ? \"Hide\" : \"Show\"}\r\n                </Button>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" className=\"submit-button\"  disabled={isSubmitting}>\r\n            {isSubmitting ? \"Submitting...\" : \"Submit \"}\r\n            </Button>\r\n\r\n            <div className=\"login-link\">\r\n              Remembered your password? <Link to=\"/login\">Login</Link>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HrResetPassword;\r\n","\"use client\";\n\nimport * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","\"use client\";\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = /*#__PURE__*/React.forwardRef(({\n  className,\n  bsPrefix,\n  as: Component = 'span',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group-text');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    className: classNames(className, bsPrefix),\n    ...props\n  });\n});\nInputGroupText.displayName = 'InputGroupText';\nexport default InputGroupText;","\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport InputGroupText from './InputGroupText';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n\n  // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"names":["formData","setFormData","useState","email","password","isSubmitting","setIsSubmitting","nav","useNavigate","token","useParams","_jsx","_Fragment","children","className","_jsxs","src","logo","alt","Form","onSubmit","async","e","preventDefault","axios","post","concat","process","status","toast","success","setTimeout","error","console","Group","controlId","Label","InputGroup","Control","type","showPassword","value","name","placeholder","onChange","target","required","Button","variant","onClick","toggleShowPassword","disabled","Link","to","context","React","displayName","InputGroupText","_ref","ref","bsPrefix","as","Component","props","useBootstrapPrefix","classNames","size","hasValidation","contextValue","useMemo","InputGroupContext","Provider","Object","assign","Text","Radio","FormCheckInput","Checkbox"],"sourceRoot":""}